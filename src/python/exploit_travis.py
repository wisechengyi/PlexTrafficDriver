import argparse
import logging
import platform
import threading
import time

import colorlog
from selenium import webdriver
from selenium.webdriver.support.wait import WebDriverWait
from selenium.common.exceptions import WebDriverException

handler = colorlog.StreamHandler()
handler.setFormatter(colorlog.ColoredFormatter(
  '%(log_color)s%(levelname)s:%(name)s:%(message)s'))

logger = colorlog.getLogger('[PlexTrafficDriver]')
logger.setLevel(logging.INFO)
logger.addHandler(handler)

URL = "http://10.1.10.5:32400/web/index.html"
TIMEOUT = 15

TWENTY_TWO_JUMP_STREET_URL = 'http://10.1.10.5:32400/web/index.html#!/server/9a60143fb554cf8aab75a364086f4c6e8ef75677/details/%2Flibrary%2Fmetadata%2F10'
INGLORIOUS_BASTERDS_URL = 'http://10.1.10.5:32400/web/index.html#!/server/9a60143fb554cf8aab75a364086f4c6e8ef75677/details/%2Flibrary%2Fmetadata%2F421'

MOVIES = {
  TWENTY_TWO_JUMP_STREET_URL, 
#  INGLORIOUS_BASTERDS_URL
}


def play_movie(this_browser, this_movie_url, arg):
  this_browser.get(URL)
#  import pdb
#  pdb.set_trace()
  this_browser.save_screenshot('x.png')
#  import pdb
#  pdb.set_trace()
  attempts = 5
  while attempts > 0:
    try:
      usr = WebDriverWait(this_browser, TIMEOUT).until(lambda x: x.find_element_by_id("username"))
    except WebDriverException:
      time.sleep(1)
    
    attempts = attempts - 1

  # usr = WebDriverWait(this_browser, TIMEOUT).until(lambda x: x.find_element_by_id("username"))
  pwd = this_browser.find_element_by_id('password')
  signin = this_browser.find_element_by_css_selector(
    '#user-account-form > div > div.form-footer > button > span.sign-in-label.btn-label')

  usr.send_keys(arg.username)
  pwd.send_keys(arg.password)
  signin.click()
  logger.info('login')
  libraries_section = WebDriverWait(this_browser, TIMEOUT).until(lambda x: x.find_element_by_css_selector(
    '#content > div > div.sidebar-container.ReactPageView-sidebarContainer-2epZQ > div > div > div > div > div.SidebarServerLibraries-librariesList-1nFi7 > div:nth-child(2) > a'
  ))
  this_browser.get(this_movie_url)
  play_button = WebDriverWait(this_browser, TIMEOUT).until(lambda x: x.find_element_by_css_selector(
    '#content > div > div > div.details-poster-container > a > div > div.media-poster-overlay-icons > i'
  ))
  play_button.click()

  player_loaded = WebDriverWait(this_browser, TIMEOUT).until(lambda x: x.find_element_by_css_selector(
    '#plex > div.video-player.dark-scrollbar.video.show-html-video.playing > div > div.video-controls-container > div > button.video-overlay-btn'
  ))
  logger.info("Started playing.")
  time.sleep(20)


def parse_args():
  parser = argparse.ArgumentParser()
  parser.add_argument('-d', '--skip-push', action='store_true',
                      help="Don't run any real commands")
  parser.add_argument("-v", "--verbose", help="increase output verbosity",
                      action="store_true")
  parser.add_argument("--stop-all", help="stop all travis builds",
                      action="store_true", default=False)
  parser.add_argument("--username", help="username", type=str)
  parser.add_argument("--password", help="password", type=str)

  return parser.parse_args()


def get_chromedrive_binary():
  if platform.system().lower() == 'darwin':
    return 'bin/chromedriver_osx_2.23'
  else:
    return 'bin/chromedriver_linux64_2.23'

if __name__ == '__main__':
  args = parse_args()
  if args.verbose:
    logger.setLevel(logging.DEBUG)
  logger.debug(args)
  existing_browsers = set()

  threads = set()
  for movie_url in MOVIES:
    # browser = webdriver.Chrome(executable_path=get_chromedrive_binary())
    # browser = webdriver.PhantomJS(executable_path='/usr/bin/phantomjs')
    browser = webdriver.Firefox()
    browser.set_window_size(1120, 550)
    existing_browsers.add(browser)
    t = threading.Thread(target=play_movie, args=(browser, movie_url, args))
    threads.add(t)
    t.start()

  for t in threads:
    t.join()

  for b in existing_browsers:
    b.quit()
